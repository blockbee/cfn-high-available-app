AWSTemplateFormatVersion: "2010-09-09"

Description: >
    This template/stack will deploy EC2 Instances and mysqlDB over the existing VPC infrastructure

Parameters: 
  EnvironmentName: 
    Description: Name of the Environment to prefix as resource name
    Type: String
  EnvironmentSize: 
    Description: Select environment Size (S, M, L)
    Type: String
    Default: SMALL
    AllowedValues: [SMALL, MEDIUM, LARGE]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName

Mappings: 
  RegionMap: #Map(1) Logical name
    us-east-1: #Key (N. Verginia)
      "Amazon": "ami-0fc61db8544a617ed"
      "RedHat": "ami-0c322300a1dd5dc79"
      "Ubuntu": "ami-07ebfd5b3428b6f4d" 
    us-east-2: #Ohio
      RedHat: ami-0520e698dd500b1d1 
      Ubuntu: ami-0fc20dd1da406780b 
      Amazon: ami-0e01ce4ee18447327
    ap-south-1: #Mumbai
      RedHat: ami-0a74bfeb190bd404f 
      Ubuntu: ami-0620d12a9cf777c87 
      Amazon: ami-03b5297d565ef30a6
  InstanceSize: #Map(2) Logical name
    SMALL: #Key
      EC2: t3.small #NAme: Value
    MEDIUM: 
      EC2: t3.medium
    LARGE: 
      EC2: t3.large

Resources: 
  BastionHost: 
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Ubuntu]
      Tags: 
        - Key: Name
          Value: !Sub BastionHost-${EnvironmentName}
  LoadBalancerSecurityGroup: #Security Groups
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allows http to our load balancer #Does this allows https too?
      VpcId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-WebAppVPCId"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub LB Sec Group for ${EnvironmentName}
  WebServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow HTTP and SSH
      VpcId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-WebAppVPCId"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub WebServer Sec Group for ${EnvironmentName}

  WebAppS3ReadOnlyEC2: #IAM EC2 Role 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - PolicyName: S3ReadOnlyEC2
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 
                  - s3:Get*
                  - s3:List*
                Resource: "*" 
          
  EC2ReadOnlyS3InstanceProfile: 
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Path: /
        Roles: 
          - !Ref WebAppS3ReadOnlyEC2
  
  WebAppLaunchConfig: #Is it works same as AWS::EC2::Instance initial ec2 launch
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          cd /var/www/html
          echo "Welcome visitor" > index.html #just in case S3 did not work
          aws s3 cp s3://johndoe-by-shiv/JohnDoe.zip
          unzip -o portfolio.zips
          systemctl start apache2.service
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Ubuntu]
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2 ]
      IamInstanceProfile: !Ref EC2ReadOnlyS3InstanceProfile
      #AssociatePublicIpAddress: true
      SecurityGroups: 
        - !Ref WebServerSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdk"
          Ebs: 
            VolumeSize: 10
  WebAppAutoScalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: WebApp Auto Scaling Group
      VPCZoneIdentifier: #A list of subnet IDs for a virtual private cloud (VPC)
        - Fn::ImportValue: !Sub "${EnvironmentName}-Private-Subnets" #Returns a list of subnets
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: 2
      MaxSize: 5
      TargetGroupARNs: 
        - !Ref WebAppTargetGroup
  WebAppLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Subnets: 
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SUB-1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SUB-2
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
  LBListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener #Specifies a listener for an Application Load Balancer
    Properties: 
      DefaultActions: 
        - Type: forward #fixed-response | forward | redirect | and more
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
  LBListenerRule: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions: 
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1
  WebAppTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-WebAppVPCId

Outputs: 
  LoadBalancerDNS: 
    Description: URL/DNS for Application Load BAlancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export: 
      Name: !Sub ${EnvironmentName}-LBDNS
  BastionIp: 
    Description: Ip address of Bastion Host
    Value: !GetAtt BastionHost.PublicIp
    Export: 
      Name: !Sub ${EnvironmentName}-BastionHost-IP

